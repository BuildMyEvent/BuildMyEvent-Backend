generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Migrations
model User {
  id        Int      @id @default(autoincrement())
  name      String
  lastname  String
  email     String   @unique
  password  String
  wallet    String?  @unique // Dirección de la wallet (MetaMask)
  roles     UserRole[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relantionships
  tickets   Ticket[] @relation("UserTickets")
  events    Event[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique 
  users     UserRole[]
}

model UserRole {
  userId   Int
  roleId   Int
  user     User @relation(fields: [userId], references: [id])
  role     Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId]) 
}

// Event Migrations

model Event {
  id                      Int                      @id @default(autoincrement())
  title                   String
  description             String?
  domain                  String
  startDate               DateTime
  endDate                 DateTime
  isApproved              Boolean                  @default(false)
  location                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  // Relación con los usuarios (organizers)
  tickets                 Ticket[]                 @relation("EventTickets")
  wlc                     WhitelabelConfiguration[]

  organizerId             Int        
  organizer               User                     @relation( fields: [organizerId], references: [id])
}

model WhitelabelConfiguration {
  id              Int       @id @default(autoincrement())
  config_key             String    // Clave de configuración
  config_value           String    // Valor de configuración
  domain          String    // Dominio de la configuración
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relantionship
  event           Event     @relation(fields: [eventId], references: [id])
  eventId         Int  
}

model Ticket {
  id          Int      @id @default(autoincrement())
  eventId     Int      
  ownerId     Int     
  type        String   // Tipo de ticket (ej. VIP, general)
  price       Float
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relantionship
  event       Event    @relation("EventTickets", fields: [eventId], references: [id])
  owner       User     @relation("UserTickets", fields: [ownerId], references: [id])
}